[{"title":"进程与线程","date":"2020-02-10T09:14:32.000Z","path":"articles/process-and-thread/","text":"进程（process）和线程（thread）是操作系统中的两个基本概念，但是这两个的概念有些抽象，所以这里用类比的方法介绍一下这两个的概念，方便理解。 类比假设有一个工厂，工厂里面有许多车间，每个车间里有许多工人，所有车间的工作都必须用电。我们将用工厂和计算机做一个类比来解释进程和线程。 CPU是计算机的核心，计算机内的所有计算任务都是由它来完成的。我们将电力类比为CPU（虽然这样类别不太准确，但突出了没有CPU计算机就无法工作特征，有这个就够了，如果没有CPU，计算机将无法工作，同样没有电力，整个工厂也就无法开工了）。 假定工厂的电力有限，一次只能供一个车间使用，也就是说，一个车间开工的时候，其他车间都必须停工。背后的含义就是，单个CPU一次只能运行任务进程就好比工厂里面的车间，它代表CPU所能处理的单个任务。任一时刻，CPU总是运行一个进程，其他进程处于非运行状态。 一个车间里，可以有很多工人。他们协同完成一个任务。线程就好比车间里的工人，一个进程可以包括多个线程。 车间的空间是工人们共享的，比如许多房间是每个工人都可以进出的。这象征一个进程的内存空间是共享的，每个线程都可以使用这些共享内存。 可是，每间房间的大小不同，有些房间最多只能容纳一个人，比如厕所。里面有人的时候，其他人就不能进去了。这代表一个线程使用某些共享内存时，其他线程必须等它结束，才能使用这一块内存。 一个防止他人进入的简单方法，就是门口加一把锁。先到的人锁上门，后到的人看到上锁，就在门口排队，等锁打开再进去。这就叫”互斥锁”（Mutual exclusion，缩写 Mutex），防止多个线程同时读写某一块内存区域。 还有些房间，可以同时容纳n个人，比如厨房。也就是说，如果人数大于n，多出来的人只能在外面等着。这好比某些内存区域，只能供给固定数目的线程使用。 这时的解决方法，就是在门口挂n把钥匙。进去的人就取一把钥匙，出来时再把钥匙挂回原处。后到的人发现钥匙架空了，就知道必须在门口排队等着了。这种做法叫做”信号量”（Semaphore），用来保证多个线程不会互相冲突。 不难看出，mutex是semaphore的一种特殊情况（n=1时）。也就是说，完全可以用后者替代前者。但是，因为mutex较为简单，且效率高，所以在必须保证资源独占的情况下，还是采用这种设计。 操作系统的设计，可以归结为三点： 以多进程形式，允许多个任务同时运行； 以多线程形式，允许单个任务分成不同的部分运行； 提供协调机制，一方面防止进程之间和线程之间产生冲突，另一方面允许进程之间和线程之间共享资源。 引用进程与线程的一个简单解释","categories":[{"name":"操作系统","slug":"操作系统","permalink":"https://eviler.top/categories/操作系统/"}],"tags":[]}]