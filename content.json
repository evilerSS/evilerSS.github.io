[{"title":"Html自带格式化标签","date":"2018-11-13T12:49:11.000Z","path":"articles/html-format/","text":"写了快一年的前端，不知道使以前学校html的时候没有注意还是没有用过就把这个东西忽略了，Html自带一些文本格式化标签，可以满足一些日常简单的文本格式化需求。今天回顾html的时候看到了，学习的同时记一下笔记。 文本格式化效果This text is boldThis text is strongThis text is smallThis text is emphasized（强调）This text is italic（斜体）This text containssubscript(下标)This text containssuperscript(上标) 代码&lt;b&gt;This text is bold&lt;/b&gt; &lt;br /&gt; &lt;strong&gt;This text is strong&lt;/strong&gt; &lt;br /&gt; &lt;small&gt;This text is small&lt;/small&gt; &lt;br /&gt; &lt;em&gt;This text is emphasized（强调）&lt;/em&gt; &lt;br /&gt; &lt;i&gt;This text is italic（斜体）&lt;/i&gt; &lt;br /&gt; This text contains &lt;sub&gt;subscript(下标)&lt;/sub&gt; &lt;br /&gt; This text contains &lt;sup&gt;superscript(上标)&lt;/sup&gt; &lt;br /&gt; 预格式化文本预格式化文本能够将标签内的文本按照自己原来的文本格式显示出来，它保留了空格和换行。 效果注意：这里编辑器将pre标签自带显示为代码，但效果是一样的 这是 预格式文本。 它保留了 空格 和换行。 for i = 1 to 10 print i next i 代码&lt;pre&gt; 这是 预格式文本。 它保留了 空格 和换行。 &lt;/pre&gt; &lt;pre&gt; for i = 1 to 10 print i next i &lt;/pre&gt; “计算机输出”标签效果Computer codeKeyboard inputSample textComputer variable 代码&lt;code&gt;Computer code&lt;/code&gt; &lt;kbd&gt;Keyboard input&lt;/kbd&gt; &lt;samp&gt;Sample text&lt;/samp&gt; &lt;var&gt;Computer variable&lt;/var&gt; 这些标签常用于显示计算机/编程代码 提示：如果只是希望使用等宽字体的效果，请使用 tt 标签。或者，如果想要在严格限制为等宽字体格式的文本中显示编程代码，请使用 pre 标签。 地址地址标签为address，使用此标签可以在Html文件中写地址 效果Written by Eviler.Visit us at:eviler.top 代码&lt;address&gt;Written by &lt;a href=&quot;eviler.top&quot;&gt;Eviler&lt;/a&gt;. Visit us at: eviler.top &lt;/address&gt; 删除字效果和插入字效果效果一打有 二十 十二 件。 代码&lt;p&gt;一打有 &lt;del&gt;二十&lt;/del&gt; &lt;ins&gt;十二&lt;/ins&gt; 件。&lt;/p&gt; 大多数浏览器会改写为删除文本和下划线文本。一些老式的浏览器会把删除文本和下划线文本显示为普通文本。我们也可以通过改变文本标签的样式来达到这种效果: &lt;p&gt;一打有 &lt;i style=&quot;text-decoration: line-through&quot;&gt;二十&lt;/i&gt; &lt;i style=&quot;text-decoration: underline&quot;&gt;十二&lt;/i&gt; 件。 &lt;/p&gt; 或者使用标签s和u： &lt;p&gt;一打有 &lt;s&gt;二十&lt;/s&gt;&lt;u&gt;十二&lt;/u&gt;件。&lt;/p&gt; 文字方向效果Here is some Hebrew text 如果浏览器支持 bi-directional override (bdo)，下一行会从右向左输出 (rtl):Here is some Hebrew text 代码&lt;bdo&gt; Here is some Hebrew text &lt;/bdo&gt; &lt;p&gt; 如果浏览器支持 bi-directional override (bdo)，下一行会从右向左输出 (rtl):&lt;/p&gt; &lt;bdo dir=&quot;rtl&quot;&gt; Here is some Hebrew text &lt;/bdo&gt; 块引用blockquote和q标签以前倒是注意到过，但是后来也没用过，就把它们给忘了 效果这是长的引用： 这是长的引用。这是长的引用。这是长的引用。这是长的引用。这是长的引用。这是短的引用：这是短的引用。 代码这是长的引用： &lt;blockquote&gt; 这是长的引用。这是长的引用。这是长的引用。这是长的引用。这是长的引用。 &lt;/blockquote&gt; 这是短的引用： &lt;q&gt;这是短的引用。&lt;/q&gt; 使用 blockquote 元素的话，浏览器会插入换行和外边距，而 q 元素不会有任何特殊的呈现。","tags":[{"name":"html","slug":"html","permalink":"https://eviler.top/tags/html/"}]},{"title":"AngularJS踩坑之路(四)：商品展示案例","date":"2018-10-15T11:15:31.000Z","path":"articles/angular-case-commodityShow/","text":"今天跟着老师做了一个简单的商品展示案例，综合使用了前几节课所学到的知识，还有一些前几节课没有涉及到的知识，真是新知复习两不误。 商品展示案例展示页面截图 商品展示案例页面截图 功能简述 显示商品列表 可根据商品名称进行搜索 可按商品评价、价格和销量进行排序展示 商品展示案例代码index.html:&lt;html lang=&quot;en&quot; ng-app=&quot;myApp&quot; id=&quot;ng-app&quot;&gt; &lt;head&gt; &lt;title&gt;商品展示&lt;/title&gt; &lt;link href=&quot;https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.1/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt; &lt;style media=&quot;screen&quot;&gt; body { padding-top: 50px; } &lt;/style&gt; &lt;/head&gt; &lt;body ng-controller=&quot;itemsController&quot;&gt; &lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col-md-6 col-sm-6 col-xs-12&quot;&gt; &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot; ng-click=&quot;changeOrderKey(&apos;better&apos;)&quot;&gt; 按评价排序 &lt;/button&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot; ng-click=&quot;changeOrderKey(&apos;price&apos;)&quot;&gt; 按价格排序 &lt;/button&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot; ng-click=&quot;changeOrderKey(&apos;saled&apos;)&quot;&gt; 按销量排序 &lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;col-md-4 col-sm-6 col-xs-12&quot;&gt; &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;输入商品名称&quot; ng-model=&quot;keyword&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;div&gt; &lt;hr&gt; &lt;/div&gt; &lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col-md-2 col-sm-3 col-xs-4&quot; ng-repeat=&quot;item in items | orderBy:orderByKey:isReverse | filter:results&quot;&gt; &lt;div class=&quot;thumbnall&quot; style=&quot;text-align:center&quot;&gt; &lt;img ng-src=&quot;{{item.img}}&quot; alt=&quot;测试图片&quot;&gt; &lt;div class=&quot;caption&quot;&gt; &lt;h4 ng-bind=&quot;item.name&quot;&gt;&lt;/h4&gt; &lt;h4&gt; &lt;span class=&quot;label label-info&quot;&gt;{{item.price | currency:'￥'}}&lt;/span&gt; &lt;/h4&gt; &lt;h6&gt;已售：{{item.saled}}&lt;/h6&gt; &lt;h6&gt;好评：{{item.better}}&lt;/h6&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt; &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/2.2.4/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.1/js/bootstrap.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.7.0/angular.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/Mock.js/1.0.1-beta3/mock-min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;main.js&quot;&gt;&lt;/script&gt; &lt;/html&gt; main.js://使用mock进行ajax拦截及数据生成 Mock.mock(&quot;https://eviler.top/qetItems&quot;, { //url随便写，只要与下面$http.get中用到的url对应就行 &apos;items|10&apos;: [{ &apos;id|+1&apos;: 1, &apos;price&apos;: /[1-9]{4}/, &apos;name&apos;: /(iPhone|sansung|BlackBerry|WindowPhone)[0-9]/, &apos;img&apos;: &quot;@DataImage(120x120, phone)&quot;, &apos;saled&apos;: /[1-9]{4}/, &apos;better&apos;: /[1-9]{4}/ }] }); const app = angular.module(&quot;myApp&quot;, []); //$http服务 专门用来发送ajax请求的服务 Angular内置服务 app.controller(&quot;itemsController&quot;, [&quot;$scope&quot;, &quot;$http&quot;, function($scope, $http) { $scope.items = []; $scope.keyword = &quot;&quot;; $scope.orderByKey = &quot;&quot;; $scope.isReverse = false; $scope.changeOrderKey = function(type) { $scope.orderByKey = type }; $scope.results = function(val) { console.log(val); return val.name.indexOf($scope.keyword) != -1; }; $http.get(&quot;https://eviler.top/qetItems&quot;).then(function(res) { $scope.items = res.data.items; console.log($scope.items); }).catch(function(err) { console.log(err); }) }]) 用到的知识 angularJs的一些内置指令 bootstrap的一些CSS样式 mock.js(模拟后端请求，可以生成随机数据)的简单使用 angularJs的$http服务","tags":[{"name":"angularJs","slug":"angularJs","permalink":"https://eviler.top/tags/angularJs/"}]},{"title":"AngularJS踩坑之路(三)：过滤器","date":"2018-10-15T01:19:41.000Z","path":"articles/angular-filter/","text":"过滤器是我们开发过程中经常会用到的东西，实际上，我们在开发中所写的格式化数据的一些函数也可以称之为过滤器，在我以前所用的框架中，过滤器都是自己写的，vue的内置过滤器也只有4种过滤器，一般满足不了我们的需求，但是AngularJS的内置过滤器就不一样了，有9种过滤器，基本可以满足我们日常开发所需，如不满足也没关系，因为我们可以自定义过滤器。 过滤器使用效果预览提示：字符’|’称为管道符 货币格式过滤器：currency 未使用过滤器：4999 使用默认过滤器：$4,999.00 使用自定义传参过滤器：￥4,999.00 时间格式过滤器：date 未使用过滤器：1539570721577 使用默认过滤器：Oct 15, 2018 使用自定义传参过滤器：2018-10-15 Monday, 10:32:01 AM 数字格式过滤器：number 未使用过滤器：1234567890 使用默认过滤器：1,234,567,890 使用自定义传参过滤器：1,234,567,890.00 字母格式过滤器：uppercase &amp; lowercase 原字符串：Hello uppercase过滤器：HELLO lowercase过滤器：hello 数组排序过滤器：orderBy原对象数组（未排序）： Apple—7999 Samsung—4998 Huawei—3999 Meizu—1998排序后（根据price进行排序，并且反向排序，即由大到小排序）： Apple—7999 Samsung—4998 Huawei—3999 Meizu—1998 过滤器：limitTo用于数组(最多显示两项，本来有四项)： Apple—7999 Samsung—4998用于字符串： 原字符串：Hello 取前三个字符：Hel 取后三个字符：llo 过滤器：filterfilter根据传入的参数从给定的数组中选择一个子集，并生成一个新数组返回原数据： Apple—7999 Samsung—4998 Meizu—1998 Huawei—3999过滤后(过滤含有字符’i’的项))： Meizu—1998 Huawei—3999注意：此过滤方式不区分字段，即只要单个项中存在所匹配内容（’i’），这个phone就会被匹配 格式化json对象过滤器：json这个就和我们熟悉的JSON.stringify()作用一样 用法：{ { jsonTest | json } }(去掉两个大括号之间的空格) 自定义过滤器上面所讲的几种过滤器都是angular内置的过滤器，提供给的功能有时候只能解决我们的部分需求，这时候就需要我们来使用自定义过滤器了。 原字符串：Hello 使用自定义过滤器myFilter（将字符串字符转化为大写）：HELLO 原数组：[1,2,3,4,5] 使用自定义过滤器arrFilter（每一项值的下标次幂，Math.pow(arr[index],index)）：[1,2,9,64,625] 注意：自定义过滤器必须有返回值 最后再说一下，这些过滤器是可以连用的，怎样使用？用管道符连接即可。 代码为了方便书写，我直接把上面输出结果的代码都写在了这里： &lt;html ng-app=&quot;myApp&quot; id=&quot;ng-app&quot;&gt; &lt;head&gt; &lt;title&gt;Angular&lt;/title&gt; &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.3.0-beta.7/angular.min.js&quot;&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div ng-controller=&quot;myController&quot;&gt; &lt;em&gt;提示：字符&apos;|&apos;称为管道符&lt;/em&gt; &lt;h4&gt;货币格式过滤器：currency&lt;/h4&gt; &lt;ul&gt; &lt;li&gt;未使用过滤器：{{price}}&lt;/li&gt; &lt;li&gt;使用默认过滤器：{{price | currency}}&lt;/li&gt; &lt;li&gt;使用自定义传参过滤器：{{price | currency:'￥'}}&lt;/li&gt; &lt;/ul&gt; &lt;h4&gt;时间格式过滤器：date&lt;/h4&gt; &lt;ul&gt; &lt;li&gt;未使用过滤器：{{time}}&lt;/li&gt; &lt;li&gt;使用默认过滤器：{{time | date}}&lt;/li&gt; &lt;li&gt;使用自定义传参过滤器：{{time | date:'yyyy-MM-dd EEEE, hh:mm:ss a'}}&lt;/li&gt; &lt;/ul&gt; &lt;h4&gt;数字格式过滤器：number &lt;/h4&gt; &lt;ul&gt; &lt;li&gt;未使用过滤器：{{count}}&lt;/li&gt; &lt;li&gt;使用默认过滤器：{{count | number}}&lt;/li&gt; &lt;li&gt;使用自定义传参过滤器：{{count | number:2}}&lt;/li&gt; &lt;/ul&gt; &lt;h4&gt;字母格式过滤器：uppercase &amp; lowercase&lt;/h4&gt; &lt;ul&gt; &lt;li&gt;原字符串：{{'Hello'}}&lt;/li&gt; &lt;li&gt;uppercase过滤器：{{'Hello' | uppercase}}&lt;/li&gt; &lt;li&gt;lowercase过滤器：{{'Hello' | lowercase}}&lt;/li&gt; &lt;/ul&gt; &lt;h4&gt;数组排序过滤器：orderBy&lt;/h4&gt; &lt;div&gt; &lt;h5&gt;原对象数组（未排序）：&lt;/h5&gt; &lt;ul&gt; &lt;li &gt; {{phone.name}}---{{phone.price}} &lt;/li&gt; &lt;/ul&gt; &lt;h5&gt;排序后（根据price进行排序，并且反向排序，即由大到小排序）：&lt;/h5&gt; &lt;ul&gt; &lt;li &gt; {{phone.name}}---{{phone.price}} &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;h4&gt;过滤器：limitTo&lt;/h4&gt; &lt;div&gt; &lt;h5&gt;用于数组(最多显示两项，本来有四项)：&lt;/h5&gt; &lt;ul&gt; &lt;li &gt; {{phone.name}}---{{phone.price}} &lt;/li&gt; &lt;/ul&gt; &lt;h5&gt;用于字符串：&lt;/h5&gt; &lt;ul&gt; &lt;li&gt;原字符串：Hello&lt;/li&gt; &lt;li&gt;取前三个字符：{{\"Hello\" | limitTo:3}}&lt;/li&gt; &lt;li&gt;取后三个字符：{{\"Hello\" | limitTo:-3}}&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;h4&gt;过滤器：filter&lt;/h4&gt; &lt;div&gt; &lt;p&gt;filter根据传入的参数从给定的数组中选择一个子集，并生成一个新数组返回&lt;/p&gt; &lt;h5&gt;原数据：&lt;/h5&gt; &lt;ul&gt; &lt;li &gt; {{phone.name}}---{{phone.price}} &lt;/li&gt; &lt;/ul&gt; &lt;h5&gt;过滤后(过滤含有字符&apos;i&apos;的项))：&lt;/h5&gt; &lt;ul&gt; &lt;li &gt; {{phone.name}}---{{phone.price}} &lt;/li&gt; &lt;/ul&gt; &lt;em&gt;注意：此过滤方式不区分字段，即只要单个项中存在所匹配内容（&apos;i&apos;），这个phone就会被匹配&lt;/em&gt; &lt;/div&gt; &lt;h4&gt;格式化json对象过滤器：json&lt;/h4&gt; &lt;div&gt; &lt;p&gt;这个就和我们熟悉的JSON.stringify()作用一样&lt;br&gt; 用法：{ { jsonTest | json } }(去掉两个大括号之间的空格) &lt;/p&gt; &lt;/div&gt; &lt;h4&gt;自定义过滤器&lt;/h4&gt; &lt;div&gt; &lt;p&gt;上面所讲的几种过滤器都是angular内置的过滤器，提供给的功能有时候只能解决我们的部分需求，这时候就需要我们来使用自定义过滤器了。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;原字符串：Hello 使用自定义过滤器myFilter（将字符串字符转化为大写）：{{\"Hello\" | myFilter}} &lt;/li&gt; &lt;li&gt;原数组：{{arr}} 使用自定义过滤器arrFilter（每一项值的下标次幂，Math.pow(arr[index],index)）：{{arr | arrFilter}} &lt;/li&gt; &lt;/ul&gt; &lt;em&gt;注意：自定义过滤器必须有返回值&lt;/em&gt; &lt;/div&gt; &lt;p&gt;最后再说一下，这些过滤器是可以连用的，怎样使用？用管道符连接即可。&lt;/p&gt; &lt;/div&gt; &lt;/body&gt; &lt;script&gt; var app = angular.module(&quot;myApp&quot;, []); app.run([&quot;$rootScope&quot;, function($rootScope) {}]); app.controller(&quot;myController&quot;, [&quot;$scope&quot;, function($scope) { $scope.orderKey = &quot;price&quot;; $scope.isOrderReverse = true; $scope.filterKey = &apos;i&apos;; $scope.price = 4999; $scope.time = Date.now(); $scope.count = 1234567890; $scope.phones = [{ name: &quot;Apple&quot;, price: 7999 }, { name: &quot;Samsung&quot;, price: 4998 }, { name: &quot;Meizu&quot;, price: 1998 }, { name: &quot;Huawei&quot;, price: 3999 }]; $scope.arr = [1, 2, 3, 4, 5]; }]); app.filter(&quot;myFilter&quot;, function() { return function(val) { return val.toUpperCase() } }) app.filter(&quot;arrFilter&quot;, function() { return function(val) { return val.map(Math.pow); } }) &lt;/script&gt; &lt;/html&gt;","tags":[{"name":"angularJs","slug":"angularJs","permalink":"https://eviler.top/tags/angularJs/"}]},{"title":"AngularJS踩坑之路(二)：控制器","date":"2018-10-14T06:50:09.000Z","path":"articles/angular-controller/","text":"今天学习了一下AngularJS中的控制器，所以这篇主要记录一下AngularJS控制器中的一些知识 概念AngularJS中的控制器是一个函数，用来向视图的作用域中添加额外的功能，我们用它来给作用于对象设置初始状态，并添加自定义行为当我们在页面上创建一个新的控制器时，AngularJS会生产并传递一个新的$scope给这个控制器，可以在这个控制器力初始化$scope。 使用控制器 创建控制器 //创建一个模块，并将控制器声明到改模块上，以避免全局污染 var app = angular.module(&quot;myApp&quot;, []); //使用module实例的controller方法创建控制器，并且将创建控制器生产的$scope注入进来，注入方式有两种，可任选其一 app.controller(&quot;myController&quot;, [&quot;$scope&quot;, function($scope) { $scope.name = &quot;Eviler&quot;; $scope.testFunc = function(){ return &quot;Hello&quot;; } }]); 在html中使用 &lt;!--由于创建了自己的模块，在这里要是有ng-app指定自己的模块--&gt; &lt;html ng-app=&quot;myApp&quot; id=&quot;ng-app&quot;&gt; &lt;!--body中--&gt; &lt;div ng-controller=&quot;myController&quot;&gt;&lt;!--通过ng-controller指令将创建的控制器绑定在元素上--&gt; {{testFunc()}} {{name}}&lt;!--输出testFunc方法和name值--&gt; &lt;/div&gt; 注入形式常见的有两种： app.controller(&quot;myController&quot;, [&quot;$scope&quot;, function($scope) { //内联式注入，推荐 $scope.name = &quot;Eviler&quot;; $scope.testFunc = function(){ return &quot;Hello&quot;; } }]); app.controller(&quot;myController&quot;, function($scope) { //推断式注入 //代码不能进行压缩混淆 $scope.name = &quot;Eviler&quot;; $scope.testFunc = function(){ return &quot;Hello&quot;; } }); 控制器可以将与一个独立试图相关的业务逻辑封装在一个独立的容器中。尽可能地精简控制器时很好的做法控制器并不适合用来执行DOM操作、格式化或数据操作，以及除存储数据模型之外的状态维护操作，它只是试图和$scope之间的桥梁 $scope和$rootScopeAngularJS应用程序含有嵌套作用域，这种嵌套结构和DOM的嵌套结构极为类似；而这种嵌套作用域的顶级作用域便是$rootScope，也就是ng-app指令所在的位置；在AngularJS中，除了隔离作用域外，其他所有的作用于都通过原型继承而来，也就是说他们都可以访问父级作用域。请看以下代码：html: &lt;div ng-controller=&quot;myController&quot;&gt; &lt;hr&gt; {{testFun()}} {{name}} {{age}} {{address}} &lt;h4&gt;子级的address值：{{address}}&lt;/h4&gt; &lt;hr&gt; &lt;div ng-controller=&quot;childController&quot;&gt; {{name}} {{age}} {{address}} &lt;/div&gt; &lt;hr&gt; &lt;div ng-controller=&quot;childController2&quot;&gt; {{name}} {{age}} {{zipCode}} &lt;h4&gt;同级的address值：{{address}}&lt;/h4&gt; &lt;/div&gt; &lt;hr&gt; &lt;/div&gt; javascript: var app = angular.module(&quot;myApp&quot;, []); //创建一个模块 app.run([&quot;$rootScope&quot;, function($rootScope) { $rootScope.name = &quot;Eviler&quot;; $rootScope.testFun = function() { return &quot;hello&quot; } }]); //myController app.controller(&quot;myController&quot;, [&quot;$scope&quot;, function($scope) { $scope.age = 20; }]); //childController app.controller(&quot;childController&quot;, [&quot;$scope&quot;, function($scope) { $scope.address = &quot;BeiJing&quot; }]) //childController2 app.controller(&quot;childController2&quot;, [&quot;$scope&quot;, function($scope) { $scope.zipCode = &quot;1234567&quot; }]) 然后看一下代码的运行结果： hello Eviler 20子级的address值： Eviler 20 Beijing Eviler 20 123456同级的address值： 我们来分析一下：name属性和testFunc方法来自$rootScopeage属性来自myController的$scopeaddress属性来自childController的$scopezipCode属性来自childController2的$scope 在myController作用域中：name、testFunc、age都能被正常访问，而访问不到定义于childController中address属性在childController2作用域中：name、testFunc、zipCode都能被正常访问，而访问不到定义于同级的childController2中的address属性所以说：父级不能使用子级的值，同级的控制器之间也不能相互使用不属于自己的值","tags":[{"name":"angularJs","slug":"angularJs","permalink":"https://eviler.top/tags/angularJs/"}]},{"title":"AngularJS踩坑之路(一)：一些有关内置指令的要记","date":"2018-10-13T12:45:10.000Z","path":"articles/angular-directive/","text":"开始入坑angularJs，在此记录一下自己学习过程中的点滴，希望angular大哥能够友好对待小弟，我的学习地址：网易云云课堂，本文章记录一些我觉得需要记录的知识点和注意事项。 表达式注意事项 不能使用任何流程控制语句(if/else) 可以使用过滤器或过滤器链（虽然还不知道怎么使用emmmm） ng-switch指令&lt;div&gt; &lt;select ng-model=&quot;selectItem&quot;&gt; &lt;option value=&quot;java&quot;&gt;java&lt;/option&gt; &lt;option value=&quot;php&quot;&gt;php&lt;/option&gt; &lt;/select&gt; &lt;ul ng-switch=&quot;selectItem&quot;&gt; &lt;li ng-switch-when=&quot;java&quot;&gt;选择了Java&lt;/li&gt; &lt;li ng-switch-when=&quot;php&quot;&gt;选择了Php&lt;/li&gt; &lt;li ng-switch-default&gt;什么都没选&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; ng-repeat指令&lt;div ng-init=&quot;arr=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;]&quot;&gt; &lt;ul&gt; &lt;li ng-repeat=&quot;x in arr&quot;&gt;{{x}}&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; 注意：下面的使用方法会使angular抛出异常 &lt;div ng-init=&quot;arr2=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;b&apos;]&quot;&gt; &lt;ul&gt; &lt;li ng-repeat=&quot;m in arr2&quot;&gt;{{m}}&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; 我们注意到，上面的arr2中有两个相同的字符’b’,angular再便利时需要一个唯一值可以与生成的dom绑定，以便追踪，而在指定的组中出现了相同的值’b’，此时需要track by来为angular确定一个唯一值，将上面的代码改为如下即可： &lt;div ng-init=&quot;arr2=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;b&apos;]&quot;&gt; &lt;ul&gt; &lt;li ng-repeat=&quot;m in arr2 track by $index&quot;&gt;{{m}}&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; 我在想，如果为了避免这种错误再次发生，我们是否可以每次使用ng-repeat指令都使用track by $index呢？我觉得没问题=_=使用过vue的人就会发现，我们使用v-for时，一般都是这种格式: &lt;li v-for=&quot;(item, index) in itenList&quot; :key=&quot;index&quot;&gt;&lt;/li&gt; 我在使用过程中发现，如果不绑定key，编辑器会发出警告信息（可能是vscode插件起的作用吧，不做追究了）angular的ng-repeat何尝不这样做呢，有利无害有木有（按照我的经验和我现在的学习进度来看）。注意：上面的话我得回收一下，因为学完这个的第二天，我又学习了过滤器，然后才发现用过滤器的时候不能使用track by，哈哈哈，打脸啪-啪-啪，左右左右BABA 还有需要注意的地方就是有关’$’操作符，按照我的理解：$index 返回数组下标$first 返回布尔值：是否为数组第一项$last 返回布尔值：是否为数组最后项 ng-class指令看看下面的代码： &lt;div ng-init=&quot;c1=&apos;box1&apos;;bol=true;isC1=true;isC2=true;isC3=false&quot;&gt; &lt;div class=&quot;box&quot; ng-class=&quot;c1&quot;&gt;&lt;/div&gt; &lt;div class=&quot;box&quot; ng-class=&quot;{true:&apos;box2&apos;,false:&apos;box3&apos;}[bol]&quot;&gt;&lt;/div&gt; &lt;div class=&quot;box&quot; ng-class=&quot;{&apos;box1&apos;:isC1,&apos;box2&apos;:isC2,&apos;box3&apos;:isC3}&quot;&gt;&lt;/div&gt; &lt;/div&gt; 其中box、box1、box2、box3为样式类名这段代码的效果是：里层的三个div绑定的class分别为（box1）、（box2）和（box1、box2）,这是dom绑定class的三种方式，我们注意到，第一种绑定方式先把类名box1赋值给c1，然后再把c1绑定在指令ng-class，这样是不是显得麻烦了？为何不直接使用下面的代码进行绑定呢： &lt;div class=&quot;box&quot; ng-class=&quot;box1&quot;&gt;&lt;/div&gt; 我试了一下，这样绑定是没有效果的，也就是没有绑定成功，但如果像下面这样使用，就可以绑定成功（box外面加一层单引号）： &lt;div class=&quot;box&quot; ng-class=&quot;&apos;box1&apos;&quot;&gt;&lt;/div&gt;","tags":[{"name":"angularJs","slug":"angularJs","permalink":"https://eviler.top/tags/angularJs/"}]}]